Index: rspec/spec/spec/story/runner/story_runner_spec.rb
===================================================================
--- rspec/spec/spec/story/runner/story_runner_spec.rb	(revision 3229)
+++ rspec/spec/spec/story/runner/story_runner_spec.rb	(working copy)
@@ -68,6 +68,44 @@
           worlds[0].should_not == worlds[1]
         end
         
+        it "should return false if the scenario runner returns false ever" do
+          #given
+          stub_scenario_runner = stub_everything
+          story_runner = StoryRunner.new(stub_scenario_runner)
+          story_runner.Story 'story', 'narrative' do
+            Scenario 'scenario1' do end
+            Scenario 'scenario2' do end
+          end
+          
+          # expect
+          stub_scenario_runner.should_receive(:run).once.and_return(false,true)
+          
+          # when
+          success = story_runner.run_stories
+          
+          #then
+          success.should == false
+        end
+        
+        it "should return true if the scenario runner returns true for all scenarios" do
+          #given
+          stub_scenario_runner = stub_everything
+          story_runner = StoryRunner.new(stub_scenario_runner)
+          story_runner.Story 'story', 'narrative' do
+            Scenario 'scenario1' do end
+            Scenario 'scenario2' do end
+          end
+          
+          # expect
+          stub_scenario_runner.should_receive(:run).once.and_return(true,true)
+          
+          # when
+          success = story_runner.run_stories
+          
+          #then
+          success.should == true
+        end
+        
         it 'should use the provided world creator to create worlds' do
           # given
           stub_scenario_runner = stub_everything
Index: rspec/spec/spec/story/runner/scenario_runner_spec.rb
===================================================================
--- rspec/spec/spec/story/runner/scenario_runner_spec.rb	(revision 3229)
+++ rspec/spec/spec/story/runner/scenario_runner_spec.rb	(working copy)
@@ -70,71 +70,120 @@
           
           # then
         end
-        
-        it 'should notify listeners when a scenario succeeds' do
-          # given
-          world = stub_everything('world')
-          story = Story.new 'story', 'narrative' do end
-          scenario = Scenario.new story, 'scenario1' do
-            # succeeds
+        describe "when a scenario succeeds" do
+          before(:each) do
+            # given
+            @world = stub_everything('world')
+            @story = Story.new 'story', 'narrative' do end
+            @scenario = Scenario.new @story, 'scenario1' do
+              # succeeds
+            end
+            @scenario_runner = ScenarioRunner.new            
           end
-          scenario_runner = ScenarioRunner.new
-          mock_listener1 = stub_everything('listener1')
-          mock_listener2 = stub_everything('listener2')
-          scenario_runner.add_listener(mock_listener1)
-          scenario_runner.add_listener(mock_listener2)
           
-          # expect
-          mock_listener1.should_receive(:scenario_succeeded).with('story', 'scenario1')
-          mock_listener2.should_receive(:scenario_succeeded).with('story', 'scenario1')
+          it 'should notify listeners' do
+            #given
+            mock_listener1 = stub_everything('listener1')
+            mock_listener2 = stub_everything('listener2')
+            @scenario_runner.add_listener(mock_listener1)
+            @scenario_runner.add_listener(mock_listener2)
+            
+            # expect
+            mock_listener1.should_receive(:scenario_succeeded).with('story', 'scenario1')
+            mock_listener2.should_receive(:scenario_succeeded).with('story', 'scenario1')
+            
+            # when
+            @scenario_runner.run(@scenario, @world)
+
+            # then
+          end
           
-          # when
-          scenario_runner.run(scenario, world)
-          
-          # then
+          it "should return true" do
+            #when
+            success = @scenario_runner.run(@scenario, @world)
+            
+            #then
+            success.should == true
+          end
         end
-        
-        it 'should notify listeners ONCE when a scenario raises an error' do
-          # given
-          error = RuntimeError.new('oops')
-          story = Story.new 'title', 'narrative' do end
-          scenario = Scenario.new story, 'scenario1' do
+
+        describe "when a scenario raises an error (other than a pending error)" do
+          before(:each) do
+            # given
+            @error = RuntimeError.new('oops')
+            @story = Story.new 'title', 'narrative' do end
+            @scenario = Scenario.new @story, 'scenario1' do
+            end
+            @scenario_runner = ScenarioRunner.new
+            @world = stub_everything
+
+            # expect
+            @world.should_receive(:errors).twice.and_return([@error, @error])
           end
-          scenario_runner = ScenarioRunner.new
-          mock_listener = stub_everything('listener')
-          scenario_runner.add_listener(mock_listener)
-          world = stub_everything
           
-          # expect
-          world.should_receive(:errors).twice.and_return([error, error])
-          mock_listener.should_receive(:scenario_failed).with('title', 'scenario1', error).once
+          it 'should notify listeners ONCE' do
+            #given
+            mock_listener = stub_everything('listener')
+            @scenario_runner.add_listener(mock_listener)
+            
+            #expect
+            mock_listener.should_receive(:scenario_failed).with('title', 'scenario1', @error).once
+
+            # when
+            @scenario_runner.run @scenario, @world
+
+            # then
+          end
           
-          # when
-          scenario_runner.run scenario, world
+          it "should return false" do
+            # when
+            success = @scenario_runner.run @scenario, @world
+
+            # then
+            success.should == false
+          end
           
-          # then
+          
         end
         
-        it 'should notify listeners when a scenario is pending' do
-          # given
-          pending_error = Spec::Example::ExamplePendingError.new('todo')
-          story = Story.new 'title', 'narrative' do end
-          scenario = Scenario.new story, 'scenario1' do
+        describe "when a scenario is pending" do
+          before(:each) do
+            # given
+            @pending_error = Spec::Example::ExamplePendingError.new('todo')
+            @story = Story.new 'title', 'narrative' do end
+            @scenario = Scenario.new @story, 'scenario1' do
+            end
+            @scenario_runner = ScenarioRunner.new
+            @world = stub_everything
+            
+            # expect
+            @world.should_receive(:errors).twice.and_return([@pending_error, @pending_error])
           end
-          scenario_runner = ScenarioRunner.new
-          mock_listener = mock('listener')
-          scenario_runner.add_listener(mock_listener)
-          world = stub_everything
           
-          # expect
-          world.should_receive(:errors).twice.and_return([pending_error, pending_error])
-          mock_listener.should_receive(:scenario_started).with('title', 'scenario1')
-          mock_listener.should_receive(:scenario_pending).with('title', 'scenario1', 'todo').once
+          it 'should notify listeners' do
+            #given 
+            mock_listener = mock('listener')
+            @scenario_runner.add_listener(mock_listener)
+            
+            # expect
+            mock_listener.should_receive(:scenario_started).with('title', 'scenario1')
+            mock_listener.should_receive(:scenario_pending).with('title', 'scenario1', 'todo').once
+
+            # when
+            @scenario_runner.run @scenario, @world
+
+            # then
+          end
           
-          # when
-          scenario_runner.run scenario, world
+          it "should return true" do
+            # when
+            success = @scenario_runner.run @scenario, @world
+
+            # then
+            success.should == true
+          end
           
-          # then
+          
         end
       end
     end
Index: rspec/lib/spec/story/runner/story_runner.rb
===================================================================
--- rspec/lib/spec/story/runner/story_runner.rb	(revision 3229)
+++ rspec/lib/spec/story/runner/story_runner.rb	(working copy)
@@ -36,6 +36,7 @@
         def run_stories
           return if @stories.empty?
           @listeners.each { |l| l.run_started(scenarios.size) }
+          success = true
           @stories.each do |story|
             story.assign_steps_to(World)
             @current_story = story
@@ -45,7 +46,7 @@
               type = story[:type] || Object
               args = story[:args] || []
               world = @world_creator.create(type, *args)
-              @scenario_runner.run(scenario, world)
+              success = success & @scenario_runner.run(scenario, world)
             end
             @listeners.each { |l| l.story_ended(story.title, story.narrative) }
             World.step_mother.clear
@@ -53,6 +54,7 @@
           unique_steps = (World.step_names.collect {|n| Regexp === n ? n.source : n.to_s}).uniq.sort
           @listeners.each { |l| l.collected_steps(unique_steps) }
           @listeners.each { |l| l.run_ended }
+          return success
         end
         
         def add_listener(listener)
Index: rspec/lib/spec/story/runner/scenario_runner.rb
===================================================================
--- rspec/lib/spec/story/runner/scenario_runner.rb	(revision 3229)
+++ rspec/lib/spec/story/runner/scenario_runner.rb	(working copy)
@@ -19,8 +19,10 @@
               @listeners.each { |l| l.scenario_pending(scenario.story.title, scenario.name, e.message) }
             else
               @listeners.each { |l| l.scenario_failed(scenario.story.title, scenario.name, e) }
+              return false
             end
           end
+          true
         end
         
         def add_listener(listener)
Index: rspec/lib/spec/story/runner.rb
===================================================================
--- rspec/lib/spec/story/runner.rb	(revision 3229)
+++ rspec/lib/spec/story/runner.rb	(working copy)
@@ -43,9 +43,9 @@
           # TODO - when story runner uses test/unit runners like example runner does we can kill
           # this and also the assorted Kernel.stub!(:at_exit) in examples
           at_exit do
-            Runner.story_runner.run_stories unless $!
+            exit Runner.story_runner.run_stories unless $!
           end
-          # TODO exit with non-zero status if run fails
+          
         end
         
         def dry_run

