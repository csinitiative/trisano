-# Copyright (C) 2007, 2008, 2009 The Collaborative Software Foundation
-#
-# This file is part of TriSano.
-#
-# TriSano is free software: you can redistribute it and/or modify it under the terms of the
-# GNU Affero General Public License as published by the Free Software Foundation, either 
-# version 3 of the License, or (at your option) any later version.
-#
-# TriSano is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
-# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
-# See the GNU Affero General Public License for more details.
-# 
-# You should have received a copy of the GNU Affero General Public License along with TriSano. 
-# If not, see http://www.gnu.org/licenses/agpl-3.0.txt.

-# Display the search results of a contact live search
%br
- if defined? @events
  -if @events.empty?
    %b No results
  -else
    %table.list
      %tr
        %th Name
        %th Birth Date
        %th Gender
        %th Jurisdiction
        %th Created Date
        %th Disease
        %th Actions
      - for event in @events do
        - jurisdictions = event.all_jurisdictions.collect { | participation | participation.secondary_entity_id }
        - can_update = User.current_user.is_entitled_to_in?(:update_event, jurisdictions)
        - can_view   = User.current_user.is_entitled_to_in?(:view_event,   jurisdictions)
        %tr
          %td 
            = event.party.last_comma_first + " (#{event.class.to_s.underscore.humanize})"
          %td= event.party.birth_date
          %td= l event.party.birth_gender_id
          %td= event.primary_jurisdiction.short_name
          %td= event.event_onset_date
          - if can_update || can_view
            %td= event.safe_call_chain(:disease_event, :disease, :disease_name)
          - else
            %td Private
          %td
            - fields_for(:morbidity_event, MorbidityEvent.new, :builder => ExtendedFormBuilder) do |f|
              - contact_event = ContactEvent.new
              - contact_event.build_interested_party(:primary_entity_id => event.interested_party.primary_entity_id)
              - contact_event.build_participations_contact
              - contact_event.interested_party.person_entity.telephones.build if contact_event.interested_party.person_entity.telephones.empty?
              = add_record_link f, :contact_child_events, "Add contact", :object => contact_event, :partial => "events/contact_from_search"
%hr
