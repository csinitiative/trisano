= content_for :title do
  = "#{t 'event_search_using_staged_message' } #{h @staged_message.id }"

= link_to h(t('back_to', :name => t('staged_messages'))), staged_messages_path

%fieldset.form
  %legend=t 'message_details'
  %table.list
    %tr
      %td
        = render @staged_message

%br
- if defined? @results
  -if @results.empty?
    %b=t('no_results')
  -else
    %table#search_results.list
      %tr
        %th=t 'name'
        %th=t 'birth_date'
        %th=t 'gender'
        %th=t 'event_type'
        %th=t 'jurisdiction'
        %th=t 'created_date'
        %th=t 'disease'
        %th=t 'cmr_actions'
        %th=t 'entity_actions'
      - previous_entity_id = nil
      - for result in @results do
        - includes_event = !result['event_id'].blank?

        - result_class = "#{search_result_class(result)} tabular"
        - current_entity_id = result['entity_id']
        - if previous_entity_id != current_entity_id
          - output_name = true
          - previous_entity_id = current_entity_id
        - else
          - output_name = false

        - if includes_event
          - jurisdictions = pg_array(result['secondary_jurisdictions']) << result['jurisdiction_entity_id']
          - can_update = User.current_user.is_entitled_to_in?(:update_event, jurisdictions)
          - can_view   = User.current_user.is_entitled_to_in?(:view_event,   jurisdictions)

        %tr{:class => result_class, :id => "entity_#{result['entity_id']}"}
          %td
            - if output_name
              = "#{h(Person.last_comma_first_middle(result))}"
            - else
              %i="&nbsp;&nbsp;#{t('same_as_above')}"
          %td
            = ld(result['birth_date']) if output_name
          %td
            = h(result['birth_gender']) if output_name
          %td
            - if includes_event
              = h(t(result['event_type'].underscore))
            - else
              %i=t 'none'
          %td
            = h(result['jurisdiction_short_name']) if includes_event
          %td
            = ld(result['event_onset_date']) if includes_event

          %td
            -if includes_event
              - if can_update || can_view
                = h(result['disease_name'])
              - else
                =t 'private'
          %td{:class => "no-strike-through"}
            - if includes_event
              - view_path = result['event_type'] == 'MorbidityEvent' ? cmr_path(result['event_id']) : contact_event_path(result['event_id'])
              = link_to t(:show), view_path
              - if result['deleted_at'].nil?
                |
                - form_tag(event_staged_message_path(@staged_message), :style => "display: inline", :id => "assign_#{result['event_id']}") do
                  = hidden_field_tag('event_id', result['event_id'])
                  = link_to_function(t(:assign_lab_result), "this.parentNode.submit()")
                |
                - form_tag(event_staged_message_path(@staged_message), :style => "display: inline") do
                  = hidden_field_tag('parent_id', result['event_id'])
                  = hidden_field_tag('type', 'encounter_event')
                  = link_to_function(t(:assign_lab_result_as_encounter), "this.parentNode.submit()")
          %td
            - if output_name
              - form_tag(event_staged_message_path(@staged_message), :style => "display: inline", :id => "assign_to_new_with_person_#{current_entity_id}") do
                = hidden_field_tag('entity_id', current_entity_id)
                = link_to_function(t(:assign_new_cmr), "this.parentNode.submit()")
              %br
              - form_tag(event_staged_message_path(@staged_message, :type => "assessment_event"), :id => "assign_to_new_ae_with_person_#{current_entity_id}", :style => "display: inline") do
                = hidden_field_tag('entity_id', current_entity_id)
                = link_to_function(t(:assign_new_ae), "this.parentNode.submit()")

  %br
  - form_tag(event_staged_message_path(@staged_message), :id => "assign_to_new") do
    = link_to_function(t("create_cmr_from_message"), "this.parentNode.submit()")
  - form_tag(event_staged_message_path(@staged_message), :id => "assign_to_new_ae", :type => "assessment_event") do
    = link_to_function(t("create_ae_from_message"), "this.parentNode.submit()")
