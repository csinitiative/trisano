-# Copyright (C) 2007, 2008, 2009 The Collaborative Software Foundation
-#
-# This file is part of TriSano.
-#
-# TriSano is free software: you can redistribute it and/or modify it under the terms of the
-# GNU Affero General Public License as published by the Free Software Foundation, either
-# version 3 of the License, or (at your option) any later version.
-#
-# TriSano is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
-# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-# See the GNU Affero General Public License for more details.
-#
-# You should have received a copy of the GNU Affero General Public License along with TriSano.
-# If not, see http://www.gnu.org/licenses/agpl-3.0.txt.

%tr
  %td
    %div{:id => "message_#{staged_message.id}", :class => "staged-message"}
      .header
        %p= "#{h staged_message.patient.patient_name}&nbsp;&ndash;&nbsp;DOB #{h staged_message.patient.birth_date||'Unknown'}"
        %p= "Specimen: #{h staged_message.observation_request.specimen_source}"
        %p= "Collected: #{h staged_message.observation_request.collection_date}"
        %p
          %small= h staged_message.message_header.sending_facility
        %div.tools
          -if staged_message.state == StagedMessage.states[:pending]
            = link_to 'Similar Events', event_search_staged_message_path(staged_message, :name => staged_message.patient.patient_name, :birth_date => staged_message.patient.birth_date)
            |
            - form_tag(discard_staged_message_url(staged_message), :style => "display: inline", :id => "discard_#{staged_message.id}") do
              = hidden_field_tag('staged_message_id', staged_message.id)
              = link_to_function("Discard", "this.parentNode.submit()")
            |
          %span{:id => "show_link_#{staged_message.id}"}
            = link_to_function 'Raw', nil do |page|
              - page["original_message_#{staged_message.id}"].show
              - page["show_link_#{staged_message.id}"].hide
              - page["hide_link_#{staged_message.id}"].show
          %span{:id => "hide_link_#{staged_message.id}", :style => 'display: none'}
            =link_to_function 'Hide', nil do |page|
              - page["original_message_#{staged_message.id}"].hide
              - page["show_link_#{staged_message.id}"].show
              - page["hide_link_#{staged_message.id}"].hide
          %p
            State:&nbsp;
            - if staged_message.state == StagedMessage.states[:assigned]
              = link_to(staged_message.state.humanize, cmr_path(staged_message.assigned_event))
            - else
              = staged_message.state.humanize

      .results
        %table
          %tr
            %th Test Date
            %th Test Type
            %th Result
            %th Reference Range
          =render staged_message.observation_request.tests
      %div{:id => "original_message_#{staged_message.id}", :class => 'raw-message', :style => 'display: none'}
        %p= h(staged_message.hl7_message)

