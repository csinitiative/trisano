-# Copyright (C) 2007, 2008, 2009, 2010, 2011 The Collaborative Software Foundation
-#
-# This file is part of TriSano.
-#
-# TriSano is free software: you can redistribute it and/or modify it under the terms of the
-# GNU Affero General Public License as published by the Free Software Foundation, either 
-# version 3 of the License, or (at your option) any later version.
-#
-# TriSano is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
-# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
-# See the GNU Affero General Public License for more details.
-# 
-# You should have received a copy of the GNU Affero General Public License along with TriSano. 
-# If not, see http://www.gnu.org/licenses/agpl-3.0.txt.

- content_for :title do
  =t 'list_morbidity_events'

- content_for :tools do
  - unless @events.empty?
    = link_to_function(t('export_all_to_csv'), nil) do |page|
      - page[:export_options].visual_effect :appear
    = "|"
  = link_to_function(t('change_view'), nil) do |page|
    - page[:change_view].visual_effect :slide_down

- content_for :tools_two do
  = new_cmr_button t("create_new_morbidity_report")

= render :partial => "export_options", :locals => { :path => export_cmrs_path(:format => 'csv') }

#change_view{:style => "display: none"}
  - form_tag(cmrs_path, :method => :get) do
    %span.horiz
      %label=t 'event_investigation_status'

      -# Contacts and events have slightly different workflows.  Get the union of the two.
      - events = MorbidityEvent.get_states_and_descriptions
      - ContactEvent.get_states_and_descriptions.each do |ce|
        - same = false
        - MorbidityEvent.get_states_and_descriptions.each do |me|
          -if ce.workflow_state == me.workflow_state
            - same = true
        - if !same
          -  events << ce

      = select_tag("states[]", options_from_collection_for_select(events, :workflow_state, :description), :size => 5, :multiple => true, :id => "states_selector")
    %span.horiz
      %label=t 'queues'
      = select_tag("queues[]", options_from_collection_for_select(@event_queues, :id, :name_and_jurisdiction), :size => 5, :multiple => true, :id => "queues_selector")
    %label=t 'investigators'
    - investigators = User.investigators_for_jurisdictions(User.current_user.jurisdiction_ids_for_privilege(:view_event))
    = select_tag("investigators[]", options_from_collection_for_select(investigators, :id, :best_name), :size => 5, :multiple => true, :id => "investigators_selector")
    %label=t 'diseases'
    = select_tag("diseases[]", options_from_collection_for_select(Disease.active.sensitive(User.current_user, nil).all(:order => 'disease_name'), :id, :disease_name), :size => 5, :multiple => true, :id => "diseases_selector")
    %label=t 'items_per_page'
    - page_options = %w(25 50 75 100).collect {|c| "<option#{c == params[:per_page] ? ' selected="selected" ' : ''}>#{h(c)}</option>"}.join
    = select_tag('per_page', page_options)
    %br
    = check_box_tag("do_not_show_deleted")
    = t("do_not_show_deleted_records") + "&nbsp;&nbsp;"
    = check_box_tag("set_as_default_view")
    = t("set_as_default_view") + "&nbsp;&nbsp;"
    = submit_tag(t("change_view"), :id => "change_view_btn")
  = link_to_function t("close"), "Effect.BlindUp('change_view')"
%p

#rot
  %table.list
    %tr
      - query_params = request.query_parameters
      - query_params.delete('commit')
      %th.forminformation
        = link_to(t("patient_name"), cmrs_path(merge_sort_params(query_params, 'patient')))
      %th
        = link_to(t("disease"), cmrs_path(merge_sort_params(query_params, 'disease')))
      %th
        = link_to(t("jurisdiction"), cmrs_path(merge_sort_params(query_params, 'jurisdiction')))
      %th
        = link_to(t("status"), cmrs_path(merge_sort_params(query_params, 'status')))
      %th
        = link_to(t("event_created"), cmrs_path(merge_sort_params(query_params, 'event_created', :date)))

      - @events.each do |event|
        - if event.is_a? ContactEvent
          = render :partial => 'contact_events/contact_event', :locals => { :contact_event => event, :view_mode => :index }
        - elsif event.is_a? AssessmentEvent
          = render :partial => 'assessment_events/assessment_event', :locals => { :assessment_event => event, :view_mode => :index }
        - else
          = render :partial => 'morbidity_events/morbidity_event', :locals => { :morbidity_event => event, :view_mode => :index }
  %br
  = will_paginate @events
