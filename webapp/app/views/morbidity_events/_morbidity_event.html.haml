-# Copyright (C) 2007, 2008, 2009 The Collaborative Software Foundation
-#
-# This file is part of TriSano.
-#
-# TriSano is free software: you can redistribute it and/or modify it under the terms of the
-# GNU Affero General Public License as published by the Free Software Foundation, either
-# version 3 of the License, or (at your option) any later version.
-#
-# TriSano is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
-# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-# See the GNU Affero General Public License for more details.
-#
-# You should have received a copy of the GNU Affero General Public License along with TriSano.
-# If not, see http://www.gnu.org/licenses/agpl-3.0.txt.

-# In an effort to speed up event listings we used native SQL (see HumanEvent.find_by_filtered_view)
-# However, when showing a single event we still use oridnary AR.  But this view is rendered by both.
-# So, rather than duplicate the visual aspects, we are making all the data conditional on who is
-# rendering this file.

- from_index = false if !defined?(from_index)

%tr.roll
  %td.forminformation
    - event_div_class(morbidity_event) do
      - if from_index
        = h(morbidity_event['last_name'] << (morbidity_event['first_name'].blank? ? "" : ", #{morbidity_event['first_name']}"))
      - else
        =h(morbidity_event.interested_party.person_entity.person.last_comma_first)
      %br
      %span{ :style => 'font-style: italic; font-size: small;'}
        ="#{t 'morbidity_event'} |"
        = ld(morbidity_event.created_at.to_date)
    .tools
      = basic_morbidity_event_controls(morbidity_event, from_index)
      = render :partial => 'morbidity_events/print_options', :locals => { :event => morbidity_event }
      = extra_tools if !from_index
  %td
    %b= h(from_index ? morbidity_event['disease_name'] : morbidity_event.try(:disease).try(:disease).try(:disease_name))
  %td
    %b= h(from_index ? i18n_jurisdiction_short_name(morbidity_event['jurisdiction_short_name']) : morbidity_event.primary_jurisdiction.short_name)
    %br
    .tools
      = jurisdiction_routing_control(morbidity_event)
    %div{:id => 'secondary_jurisdictions'}
      %small
        - if from_index
          = h(pg_array(morbidity_event['secondary_jurisdictions']).map { |j| j.gsub(/\"/, '')}.join(', '))
        - else
          = h(morbidity_event.secondary_jurisdictions.map { |j| j.short_name }.join(", "))
  %td
    %b= h(morbidity_event.state_description)

    - queue_name = from_index ? morbidity_event['queue_name'] : morbidity_event.try(:event_queue).try(:queue_name)
    - unless queue_name.blank?
      %div{:id => 'queue_info'}
        %small
          =ct 'queue'
          &nbsp;
          %b= h(queue_name)

    - inv_name = from_index ? morbidity_event['investigator_name'] : morbidity_event.try(:investigator).try(:best_name)
    - unless inv_name.blank?
      %div{:id => 'investigator_info'}
        %small
          =ct 'investigator'
          &nbsp;
          %b= h(inv_name)

    .tools
      = state_controls(morbidity_event)
