<Schema name="TriSano">
	<Cube name="Morbidity Events" caption="Morbidity Events" cache="true" enabled="true">
		<Table name="dw_morbidity_events_view" schema="trisano">
		</Table>
        <Dimension type="StandardDimension" foreignKey="dw_patients_id" name="Gender">
            <Hierarchy name="Gender" primaryKey="id" allMemberName="All Genders" hasAll="true">
                <Table name="dw_morbidity_patients_view" schema="trisano"></Table>
                <Level name="Gender" type="String" uniqueMembers="true" levelType="Regular" hideMemberIf="Never">
                    <KeyExpression>
                        <SQL dialiect="postgres">CASE WHEN birth_gender IS NULL THEN 'Unknown' ELSE birth_gender END</SQL>
                    </KeyExpression>
                </Level>
            </Hierarchy>
        </Dimension>
        <Dimension type="StandardDimension" foreignKey="dw_patients_id" name="Ethnicity">
            <Hierarchy name="Ethnicity" primaryKey="id" allMemberName="All Ethnicities" hasAll="true">
                <Table name="dw_morbidity_patients_view" schema="trisano"></Table>
                <Level name="Ethnicity" type="String" uniqueMembers="true" levelType="Regular" hideMemberIf="Never">
                    <KeyExpression>
                        <SQL dialiect="postgres">CASE WHEN ethnicity IS NULL THEN 'Unknown' ELSE ethnicity END</SQL>
                    </KeyExpression>
                </Level>
            </Hierarchy>
        </Dimension>
		<Dimension type="StandardDimension" foreignKey="date_disease_diagnosed" name="Disease diagnosis date">
			<Hierarchy name="Date" hasAll="true" primaryKey="fulldate">
				<Table name="dw_date_dimension_view" schema="trisano"></Table>
				<Level name="Year" column="year" type="Integer" uniqueMembers="false" levelType="Regular" hideMemberIf="Never"></Level>
				<Level name="Month" column="month" type="Integer" uniqueMembers="false" levelType="Regular" hideMemberIf="Never"></Level>
				<Level name="Day" column="day_of_month" type="Integer" uniqueMembers="false" levelType="Regular" hideMemberIf="Never"></Level>
			</Hierarchy>
		</Dimension>
		<Dimension type="StandardDimension" foreignKey="date_disease_onset" name="Disease onset date">
			<Hierarchy name="Date" hasAll="true" primaryKey="fulldate">
				<Table name="dw_date_dimension_view" schema="trisano"></Table>
				<Level name="Year" column="year" type="Integer" uniqueMembers="false" levelType="Regular" hideMemberIf="Never"></Level>
				<Level name="Month" column="month" type="Integer" uniqueMembers="false" levelType="Regular" hideMemberIf="Never"></Level>
				<Level name="Day" column="day_of_month" type="Integer" uniqueMembers="false" levelType="Regular" hideMemberIf="Never"></Level>
			</Hierarchy>
		</Dimension>
        <Dimension type="StandardDimension" name="Investigation">
            <Hierarchy hasAll="true">
                <Level type="String" name="Jurisdiction" column="investigating_jurisdiction"></Level>
                <Level type="String" name="Investigator" column="investigator"></Level>
            </Hierarchy>
        </Dimension>
        <Dimension type="StandardDimension" foreignKey="disease_id" name="Disease">
            <Hierarchy name="Disease" hasAll="true" primaryKey="id">
                <Table name="diseases_view" schema="trisano"></Table>
                <Level name="Disease" column="disease_name" type="String" uniqueMembers="true"></Level>
            </Hierarchy>
        </Dimension>
        <Dimension type="StandardDimension" name="Age" allMemberName="All Ages">
            <Hierarchy hasAll="true">
                <Level type="String" name="Age Group">
                    <KeyExpression><SQL dialect="postgres">
                        COALESCE(trisano.get_age_group(age_in_years), 'Unknown')
                    </SQL></KeyExpression>
                </Level>
                <Level type="String" name="Age" ordinalColumn="age_in_years">
                    <KeyExpression><SQL dialect="postgres">
                        COALESCE(age_in_years::text, 'Unknown')
                    </SQL></KeyExpression>
                </Level>
            </Hierarchy>
        </Dimension>
        <Dimension type="StandardDimension" name="Race" foreignKey="dw_patients_id">
            <Hierarchy hasAll="true" primaryKey="id" primaryKeyTable="dw_morbidity_patients_view">
                <Join leftKey="id" rightAlias="dw_morbidity_patients_races_view" rightKey="person_id">
                    <Table name="dw_morbidity_patients_view" schema="trisano" />
                    <Table name="dw_morbidity_patients_races_view" schema="trisano" />
                </Join>
                <Level name="Race" column="race" type="String" uniqueMembers="true" table="dw_morbidity_patients_races_view" />
            </Hierarchy>
        </Dimension>
        <!-- Measures -->
        <!-- Count, Risk factors -->
		<Measure name="Count" datatype="Integer" aggregator="count" visible="true" column="id"></Measure>
		<Measure name="Pregnant" datatype="Integer" aggregator="sum" visible="true">
            <MeasureExpression>
                <SQL dialect="postgres">CASE WHEN pregnant = 'Yes' THEN 1 ELSE 0 END</SQL>
            </MeasureExpression>
        </Measure>
		<Measure name="Group living" datatype="Integer" aggregator="sum" visible="true">
            <MeasureExpression>
                <SQL dialect="postgres">CASE WHEN group_living = 'Yes' THEN 1 ELSE 0 END</SQL>
            </MeasureExpression>
        </Measure>
		<Measure name="Day care association" datatype="Integer" aggregator="sum" visible="true">
            <MeasureExpression>
                <SQL dialect="postgres">CASE WHEN day_care_association = 'Yes' THEN 1 ELSE 0 END</SQL>
            </MeasureExpression>
        </Measure>
		<Measure name="Healthcare worker" datatype="Integer" aggregator="sum" visible="true">
            <MeasureExpression>
                <SQL dialect="postgres">CASE WHEN healthcare_worker = 'Yes' THEN 1 ELSE 0 END</SQL>
            </MeasureExpression>
        </Measure>
		<Measure name="Food handler" datatype="Integer" aggregator="sum" visible="true">
            <MeasureExpression>
                <SQL dialect="postgres">CASE WHEN food_handler = 'Yes' THEN 1 ELSE 0 END</SQL>
            </MeasureExpression>
        </Measure>
        <!-- Days from Onset to Diagnosis -->
        <Measure name="Onset to Diagnosis (days), Min" aggregator="min" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_disease_diagnosed - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Diagnosis (days), Max" aggregator="max" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_disease_diagnosed - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Diagnosis (days), Avg" aggregator="avg" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_disease_diagnosed - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Diagnosis (days), Median" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.median(date_disease_diagnosed - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Diagnosis (days), Mode" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.mode(date_disease_diagnosed - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Diagnosis (days), Std dev" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_dpcust(stddev(date_disease_diagnosed - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <!-- Days from Onset to Report -->
        <Measure name="Onset to Report (days), Min" aggregator="min" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_reported_to_public_health - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Report (days), Max" aggregator="max" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_reported_to_public_health - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Report (days), Avg" aggregator="avg" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_reported_to_public_health - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Report (days), Median" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.median(date_reported_to_public_health - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Report (days), Mode" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.mode(date_reported_to_public_health - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Report (days), Std dev" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_dpcust(stddev(date_reported_to_public_health - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <!-- Days from Onset to Start of Investigation -->
        <Measure name="Onset to Investigation Start (days), Min" aggregator="min" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_investigation_started - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation Start (days), Max" aggregator="max" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_investigation_started - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation Start (days), Avg" aggregator="avg" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_investigation_started - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation Start (days), Median" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.median(date_investigation_started - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation Start (days), Mode" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.mode(date_investigation_started - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation Start (days), Std dev" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_dpcust(stddev(date_investigation_started - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <!-- Days from Onset to End of Investigation -->
        <Measure name="Onset to Investigation End (days), Min" aggregator="min" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_investigation_completed - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation End (days), Max" aggregator="max" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_investigation_completed - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation End (days), Avg" aggregator="avg" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_investigation_completed - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation End (days), Median" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.median(date_investigation_completed - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation End (days), Mode" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.mode(date_investigation_completed - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation End (days), Std dev" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_dpcust(stddev(date_investigation_completed - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <!-- Length of investigation -->
        <Measure caption="Length (days) of Investigation, Min" name="MinInvLength" aggregator="min" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_investigation_completed - date_investigation_started)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure caption="Length (days) of Investigation, Max" name="MaxInvLength" aggregator="max" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_investigation_completed - date_investigation_started)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure caption="Length (days) of Investigation, Avg" name="AvgInvLength" aggregator="avg" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_investigation_completed - date_investigation_started)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure caption="Length (days) of Investigation, Median" name="MedianInvLength" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.median((date_investigation_completed - date_investigation_started)::integer))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure caption="Length (days) of Investigation, Mode" name="ModeInvLength" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.mode((date_investigation_completed - date_investigation_started)::integer))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure caption="Length (days) of Investigation, Std dev" name="StdevInvLength" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_dpcust(stddev(date_investigation_completed - date_investigation_started))</SQL>
            </MeasureExpression>
        </Measure>
        <!-- Age at onset stuff -->
        <Measure caption="Age at Onset (years), Min" name="MinAgeAtOnset" aggregator="min" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(trisano.get_age_in_years(actual_age_at_onset, actual_age_type))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure caption="Age at Onset (years), Max" name="MaxAgeAtOnset" aggregator="max" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(trisano.get_age_in_years(actual_age_at_onset, actual_age_type))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure caption="Age at Onset (years), Avg" name="AvgAgeAtOnset" column="age_in_years" aggregator="avg" datatype="Integer" visible="True"> </Measure>
        <Measure caption="Age at Onset (years), Median" name="MedianAgeAtOnset" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_numcust(trisano.median(trisano.get_age_in_years(actual_age_at_onset, actual_age_type)))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure caption="Age at Onset (years), Mode" name="ModeAgeAtOnset" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.mode(floor(trisano.get_age_in_years(actual_age_at_onset, actual_age_type)))::integer)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="StdevAgeAtOnset" caption="Age at Onset (years), Std Dev" visible="true" aggregator="count" datatype="Numeric">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_numcust(stddev(trisano.get_age_in_years(actual_age_at_onset, actual_age_type)))</SQL>
            </MeasureExpression>
        </Measure>
        <!-- etc. -->
		<Measure name="Once a contact" datatype="Integer" aggregator="count" visible="false">
            <MeasureExpression>
                <SQL dialect="postgres">CASE WHEN parent_id IS NOT NULL THEN 1 ELSE 0 END</SQL>
            </MeasureExpression>
        </Measure>
        <CalculatedMember name="Population" formula="GetPopulation([Count])" dimension="Measures" visible="true" />
        <CalculatedMember name="RatePerc" visible="false" formula="[Count] / GetPopulation([Count]) * 100" formatString="##.####%" dimension="Measures" />
        <CalculatedMember name="Rate" formula="IIf(NOT ([Measures].[Population] = 0), Format([Measures].[RatePerc], '##.#### %'), '0 %')" visible="true" dimension="Measures" />
	</Cube>

	<Cube name="Contact Events" caption="Contact Events" cache="true" enabled="true">
    <Table name="dw_contact_events_view" schema="trisano">
    </Table>
        <Dimension type="StandardDimension" foreignKey="dw_patients_id" name="Gender">
            <Hierarchy name="Gender" primaryKey="id" allMemberName="All Genders" hasAll="true">
                <Table name="dw_contact_patients_view" schema="trisano"></Table>
                <Level name="Gender" type="String" uniqueMembers="true" levelType="Regular" hideMemberIf="Never">
                    <KeyExpression>
                        <SQL dialiect="postgres">CASE WHEN birth_gender IS NULL THEN 'Unknown' ELSE birth_gender END</SQL>
                    </KeyExpression>
                </Level>
            </Hierarchy>
        </Dimension>
        <Dimension type="StandardDimension" foreignKey="dw_patients_id" name="Ethnicity">
            <Hierarchy name="Ethnicity" primaryKey="id" allMemberName="All Ethnicities" hasAll="true">
                <Table name="dw_contact_patients_view" schema="trisano"></Table>
                <Level name="Ethnicity" type="String" uniqueMembers="true" levelType="Regular" hideMemberIf="Never">
                    <KeyExpression>
                        <SQL dialiect="postgres">CASE WHEN ethnicity IS NULL THEN 'Unknown' ELSE ethnicity END</SQL>
                    </KeyExpression>
                </Level>
            </Hierarchy>
        </Dimension>
		<Dimension type="StandardDimension" foreignKey="date_disease_diagnosed" name="Disease diagnosis date">
			<Hierarchy name="Date" hasAll="true" primaryKey="fulldate">
				<Table name="dw_date_dimension_view" schema="trisano"></Table>
				<Level name="Year" column="year" type="Integer" uniqueMembers="false" levelType="Regular" hideMemberIf="Never"></Level>
				<Level name="Month" column="month" type="Integer" uniqueMembers="false" levelType="Regular" hideMemberIf="Never"></Level>
				<Level name="Day" column="day_of_month" type="Integer" uniqueMembers="false" levelType="Regular" hideMemberIf="Never"></Level>
			</Hierarchy>
		</Dimension>
		<Dimension type="StandardDimension" foreignKey="date_disease_onset" name="Disease onset date">
			<Hierarchy name="Date" hasAll="true" primaryKey="fulldate">
				<Table name="dw_date_dimension_view" schema="trisano"></Table>
				<Level name="Year" column="year" type="Integer" uniqueMembers="false" levelType="Regular" hideMemberIf="Never"></Level>
				<Level name="Month" column="month" type="Integer" uniqueMembers="false" levelType="Regular" hideMemberIf="Never"></Level>
				<Level name="Day" column="day_of_month" type="Integer" uniqueMembers="false" levelType="Regular" hideMemberIf="Never"></Level>
			</Hierarchy>
		</Dimension>
        <Dimension type="StandardDimension" name="Investigation">
            <Hierarchy hasAll="true">
                <Level type="String" name="Jurisdiction" column="investigating_jurisdiction"></Level>
                <Level type="String" name="Investigator" column="investigator"></Level>
            </Hierarchy>
        </Dimension>
        <Dimension type="StandardDimension" foreignKey="disease_id" name="Disease">
            <Hierarchy name="Disease" hasAll="true" primaryKey="id">
                <Table name="diseases_view" schema="trisano"></Table>
                <Level name="Disease" column="disease_name" type="String" uniqueMembers="true"></Level>
            </Hierarchy>
        </Dimension>
        <Dimension type="StandardDimension" name="Race" foreignKey="dw_patients_id">
            <Hierarchy hasAll="true" primaryKey="id" primaryKeyTable="dw_contact_patients_view">
                <Join leftKey="id" rightAlias="dw_contact_patients_races_view" rightKey="person_id">
                    <Table name="dw_contact_patients_view" schema="trisano" />
                    <Table name="dw_contact_patients_races_view" schema="trisano" />
                </Join>
                <Level name="Race" column="race" type="String" uniqueMembers="true" table="dw_contact_patients_races_view" />
            </Hierarchy>
        </Dimension>
        <!-- Measures -->
        <!-- Count, Risk factors -->
		<Measure name="Count" datatype="Integer" aggregator="count" visible="true" column="id"></Measure>
		<Measure name="Pregnant" datatype="Integer" aggregator="sum" visible="true">
            <MeasureExpression>
                <SQL dialect="postgres">CASE WHEN pregnant = 'Yes' THEN 1 ELSE 0 END</SQL>
            </MeasureExpression>
        </Measure>
		<Measure name="Group living" datatype="Integer" aggregator="sum" visible="true">
            <MeasureExpression>
                <SQL dialect="postgres">CASE WHEN group_living = 'Yes' THEN 1 ELSE 0 END</SQL>
            </MeasureExpression>
        </Measure>
		<Measure name="Day care association" datatype="Integer" aggregator="sum" visible="true">
            <MeasureExpression>
                <SQL dialect="postgres">CASE WHEN day_care_association = 'Yes' THEN 1 ELSE 0 END</SQL>
            </MeasureExpression>
        </Measure>
		<Measure name="Healthcare worker" datatype="Integer" aggregator="sum" visible="true">
            <MeasureExpression>
                <SQL dialect="postgres">CASE WHEN healthcare_worker = 'Yes' THEN 1 ELSE 0 END</SQL>
            </MeasureExpression>
        </Measure>
		<Measure name="Food handler" datatype="Integer" aggregator="sum" visible="true">
            <MeasureExpression>
                <SQL dialect="postgres">CASE WHEN food_handler = 'Yes' THEN 1 ELSE 0 END</SQL>
            </MeasureExpression>
        </Measure>
        <!-- Days from Onset to Diagnosis -->
        <Measure name="Onset to Diagnosis (days), Min" aggregator="min" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_disease_diagnosed - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Diagnosis (days), Max" aggregator="max" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_disease_diagnosed - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Diagnosis (days), Avg" aggregator="avg" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_disease_diagnosed - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Diagnosis (days), Median" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.median(date_disease_diagnosed - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Diagnosis (days), Mode" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.mode(date_disease_diagnosed - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Diagnosis (days), Std dev" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_dpcust(stddev(date_disease_diagnosed - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <!-- Days from Onset to Start of Investigation -->
        <Measure name="Onset to Investigation Start (days), Min" aggregator="min" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_investigation_started - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation Start (days), Max" aggregator="max" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_investigation_started - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation Start (days), Avg" aggregator="avg" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_investigation_started - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation Start (days), Median" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.median(date_investigation_started - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation Start (days), Mode" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.mode(date_investigation_started - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation Start (days), Std dev" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_dpcust(stddev(date_investigation_started - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <!-- Days from Onset to End of Investigation -->
        <Measure name="Onset to Investigation End (days), Min" aggregator="min" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_investigation_completed - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation End (days), Max" aggregator="max" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_investigation_completed - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation End (days), Avg" aggregator="avg" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_investigation_completed - date_disease_onset)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation End (days), Median" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.median(date_investigation_completed - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation End (days), Mode" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.mode(date_investigation_completed - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="Onset to Investigation End (days), Std dev" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_dpcust(stddev(date_investigation_completed - date_disease_onset))</SQL>
            </MeasureExpression>
        </Measure>
        <!-- Length of investigation -->
        <Measure caption="Length (days) of Investigation, Min" name="MinInvLength" aggregator="min" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_investigation_completed - date_investigation_started)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure caption="Length (days) of Investigation, Max" name="MaxInvLength" aggregator="max" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_investigation_completed - date_investigation_started)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure caption="Length (days) of Investigation, Avg" name="AvgInvLength" aggregator="avg" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(date_investigation_completed - date_investigation_started)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure caption="Length (days) of Investigation, Median" name="MedianInvLength" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.median((date_investigation_completed - date_investigation_started)::integer))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure caption="Length (days) of Investigation, Mode" name="ModeInvLength" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.mode((date_investigation_completed - date_investigation_started)::integer))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure caption="Length (days) of Investigation, Std dev" name="StdevInvLength" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_dpcust(stddev(date_investigation_completed - date_investigation_started))</SQL>
            </MeasureExpression>
        </Measure>
        <!-- Age at onset stuff -->
        <Measure caption="Age at Onset (years), Min" name="MinAgeAtOnset" aggregator="min" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(trisano.get_age_in_years(actual_age_at_onset, actual_age_type))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure caption="Age at Onset (years), Max" name="MaxAgeAtOnset" aggregator="max" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">(trisano.get_age_in_years(actual_age_at_onset, actual_age_type))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure caption="Age at Onset (years), Avg" name="AvgAgeAtOnset" column="age_in_years" aggregator="avg" datatype="Integer" visible="True"> </Measure>
        <Measure caption="Age at Onset (years), Median" name="MedianAgeAtOnset" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_numcust(trisano.median(trisano.get_age_in_years(actual_age_at_onset, actual_age_type)))</SQL>
            </MeasureExpression>
        </Measure>
        <Measure caption="Age at Onset (years), Mode" name="ModeAgeAtOnset" aggregator="count" visible="true" datatype="Integer">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_intcust(trisano.mode(floor(trisano.get_age_in_years(actual_age_at_onset, actual_age_type)))::integer)</SQL>
            </MeasureExpression>
        </Measure>
        <Measure name="StdevAgeAtOnset" caption="Age at Onset (years), Std Dev" visible="true" aggregator="count" datatype="Numeric">
            <MeasureExpression>
                <SQL dialect="postgres">trisano.make_numcust(stddev(trisano.get_age_in_years(actual_age_at_onset, actual_age_type)))</SQL>
            </MeasureExpression>
        </Measure>
        <!-- etc. -->
        <CalculatedMember name="Population" formula="GetPopulation([Count])" dimension="Measures" visible="true" />
        <CalculatedMember name="RatePerc" visible="false" formula="[Count] / GetPopulation([Count]) * 100" formatString="##.####%" dimension="Measures" />
        <CalculatedMember name="Rate" formula="IIf(NOT ([Measures].[Population] = 0), Format([Measures].[RatePerc], '##.#### %'), '0 %')" visible="true" dimension="Measures" />
	</Cube>
    <UserDefinedFunction name="GetPopulation" className="org.trisano.mondrian.GetPopulation" />
</Schema>
